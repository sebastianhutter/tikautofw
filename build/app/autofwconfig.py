#!/usr/bin/env python3
"""
    parse configuration for script.
    the whole config is done via env variables
"""

import os

class AutoFwConfig(object):

    def __init__(self):
        """
            initialize and check configuration
        """
        # rancher api service
        self.rancher_api_url=os.getenv('AUTOFW_RANCHER_API_URL','')
        self.rancher_api_key=os.getenv('AUTOFW_RANCHER_API_KEY','')
        self.rancher_api_secret=os.getenv('AUTOFW_RANCHER_API_SECRET','')

        # if no rancher api config was given raise an error
        if not self.rancher_api_url or not self.rancher_api_key or not self.rancher_api_secret:
            raise Exception('Invalid Rancher Configuration')

        # docker labels for config
        # only check running containers?
        self.docker_check_running=os.getenv('AUTOFW_DOCKER_CHECK_RUNNING','true')
        # whats the container label which activates or disables the automatic fw settings
        self.docker_label_enable=os.getenv('AUTOFW_DOCKER_LABEL_ENABLE','cloud.hutter.autofw.enable')
        # nat lables
        # whats the label defining the nat rules
        self.docker_label_dstnat=os.getenv('AUTOFW_DOCKER_LABEL_NAT','cloud.hutter.autofw.ip.firewall.dstnat')
        # label for additional comment
        self.docker_label_dstnat_comment=os.getenv('AUTOFW_DOCKER_LABEL_NAT_COMMENT','cloud.hutter.autofw.ip.firewall.dstnat.comment')

        # dns labels
        # whats the label which holds the dns names
        self.docker_label_staticdns=os.getenv('AUTOFW_DOCKER_LABEL_DNS','cloud.hutter.autofw.ip.dns.static')
        self.docker_label_staticdns_comment=os.getenv('AUTOFW_DOCKER_LABEL_DNS_COMMENT','cloud.hutter.autofw.ip.dns.static.comment')

        # mikrotik config
        self.mikrotik_address=os.getenv('AUTOFW_MIKROTIK_ADDRESS','')
        self.mikrotik_ssh_port=os.getenv('AUTOFW_MIKROTIK_SSH_PORT','22')
        # we use paramiko to access the ssh interface of the mikrotik
        # router. (with username and password)
        self.mikrotik_user=os.getenv('AUTOFW_MIKROTIK_USER','')
        self.mikrotik_pass=os.getenv('AUTOFW_MIKROTIK_PASS','')
        # the comment which is used to filter for firewall rules
        self.mikrotik_comment=os.getenv('AUTOFW_MIKROTIK_COMMENT','generated by autofw')

        # if no mikrotik address or no mikrotik credentials are specified
        # raise an error
        if not self.mikrotik_address or not self.mikrotik_user or not self.mikrotik_pass:
            raise Exception('Invalid Mikrotik Configuration')

        # loglevel
        self.loglevel = os.getenv('AUTOFW_LOGLEVEL','info')

        # time in seconds between runs
        self.schedule = os.getenv('AUTOFW_SCHEDULE','10')